//|--------------------------|PLUGINS|---------------------------|
plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.android"
    id "maven-publish"
}
apply plugin: "maven-publish"

/*apply plugin: "idea"
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}*/

//project.ext.name = "rz-kotlin-utils"
ext {
    name = "rz-kotlin-utils"
}

def libsName = "rz-kotlin-utils"

//|----------------------|ANDROID SECTION|-----------------------|
android {
    namespace "com.rzrasel.kotlinutils"
    compileSdk 33

    //|---------------------|DEFAULT CONFIG|---------------------|
    defaultConfig {
        /*minSdk 16
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"*/

        //def date = new Date()
        //def formattedDate = date.format("yyyy-MM-dd")
        //def apkName = "$rootProject.APP_NAME" + "-" + formattedDate + "-v" + defaultConfig.versionName
        //def apkName = "$project.ext.coreConfig.APP_NAME" + "-" + formattedDate + "-v-" + defaultConfig.versionName
        //def apkName = "$libsName" + "-v" + rootProject.versionName
        String apkName = "$libsName" + "-v" + rootProject.versionName
        apkName = apkName.replaceAll("-release", "")
        setProperty("archivesBaseName", "$apkName")
    }

    //|----------------------|BUILD TYPES|-----------------------|
    buildTypes {
        //|Build Types - Debug|----------------------------------|
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        //|Build Types - Release|--------------------------------|
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    //|-----------|COMPILE OPTIONS - JAVA VERSION 17|------------|
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    //|------------|KOTLIN OPTIONS - JAVA VERSION 17|------------|
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
}

//|--------------------|DEPENDENCIES SECTION|--------------------|
dependencies {

    //|--------------|SYSTEM DEFINED DEPENDENCIES|---------------|
    implementation "androidx.core:core-ktx:1.10.1"
    /*
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "com.google.android.material:material:1.9.0"
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"*/

    //|---------------|USER DEFINED DEPENDENCIES|----------------|
    /*testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.1")
    api("org.apache.commons:commons-math3:3.6.1")
    implementation("com.google.guava:guava:31.1-jre")*/
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.20"
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.5"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.1"
}

/*project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId "com.rzrasel.kotlin"
                artifactId "utils"
                version "0.0.1"

                if (project.plugins.findPlugin("com.android.library")) {
                    from components.release
                } else {
                    from components.java
                }

                //artifact androidSourcesJar
                //artifact javadocJar
            }
        }
    }
}*/

afterEvaluate {
    publishing {
        publications {
            //register<MavenPublication>("release") {
            maven(MavenPublication) {
                groupId = "com.rzrasel.kotlin"
                artifactId = "utils"
                version = "0.0.1"

                artifact androidJavadocsJar
                artifact androidSourcesJar

                from(components["release"])
            }
        }
    }
}

/*afterEvaluate {
    android.libraryVariants.all { variant ->
        publishing.publications.create(variant.name, MavenPublication) {
            from components.findByName(variant.name)

            //artifact androidJavadocsJar
            //artifact androidSourcesJar

            groupId = "com.rzrasel.kotlin"
            artifactId = "utils"
            version = "0.0.1"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = "com.rzrasel.kotlin"
            artifactId = "utils"
            version = "0.0.1"
            from components.findByName(it.name)

            pom {
                description = "A description of my library"
            }
        }
    }
}*/


/*task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        /=*if (variant.name == "release") {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }*=/
        owner.classpath += variant.javaCompileProvider.get().classpath
    }
    exclude "**=/R.html", "**=/R.*.html", "**=/index.html"

    options {
        memberLevel = JavadocMemberLevel.PROTECTED
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set("javadoc")
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}*/

/*task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    if (project.plugins.findPlugin("com.android.library")) {
        from android.sourceSets.main.java.srcDirs
        from android.sourceSets.main.kotlin.srcDirs
    } else {
        from sourceSets.main.java.srcDirs
        from sourceSets.main.kotlin.srcDirs
    }
}*/

/*tasks.withType(dokkaHtmlPartial.getClass()).configureEach {
    pluginsMapConfiguration.set(
            ["org.jetbrains.dokka.base.DokkaBase": """{ "separateInheritedMembers": true}"""]
    )
}*/
/*task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}
task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set("javadoc")
    from androidJavadocs.destinationDir
}*/

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        /*if (variant.name == "release") {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }*/
        owner.classpath += variant.javaCompileProvider.get().classpath
    }
    exclude "**/R.html", "**/R.*.html", "**/index.html"

    options {
        memberLevel = JavadocMemberLevel.PROTECTED
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set("javadoc")
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
}

/*
afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = "com.rzrasel"
                artifactId = "kotlinutils"
                version = Config.libraryVersion
            }
        }
    }
}*/
